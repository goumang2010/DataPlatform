diff --git a/static/src/js/component/custom/databp/heatmap.vue b/static/src/js/component/custom/databp/heatmap.vue
index b2274a5..a5cf8a4 100644
--- a/static/src/js/component/custom/databp/heatmap.vue
+++ b/static/src/js/component/custom/databp/heatmap.vue
@@ -1,4 +1,15 @@
 <template>
+<div class="extendNav">
+	<div class='form-group data-type'>
+		<label>数据</label>
+		<select v-model="datatype">
+			<option v-for="type of dataTypes" value="{{type}}">{{type}}</option>
+		</select>
+	 </div>
+	<label><input type="checkbox" v-model="mask"></input>显示热力图</label>
+
+</div>
+
 <div class="mask" v-show="mask"> </div>
 <visualbp> </visualbp>
 </template>
@@ -17,49 +28,108 @@
 		},
 		data: function() {
 			return {
-				mask: true
+				mask: true,
+				maskNodes: [],
+				dataTypes: ['pv', 'uv'],
+				datatype: 'pv'
 			}
 		},
 		route: {
-	        activate: function (transition) {
+			activate: function (transition) {
 				let query = this.$route.query;   	
-	        	let pageUrl = query.pageUrl;
+				let pageUrl = query.pageUrl;
 				if (pageUrl) {
 					this.$broadcast('visual_url', query);
 				}
 				return Promise.resolve(true);
-	        }
-    	},
+			}
+		},
 		events: {
-		    'visualbp_loaded': function (config) {
-		    	this.init(config);
-		    }
+			'visualbp_loaded': function (config) {
+				this.init(config);
+			}
 		},
 		methods: {
 			init(config) {
+				// var $iframe = $('iframe').contents();
+				// var $body = $iframe.find('body');
+				// let $elem = $iframe.find('body > div.gome-about.gome-wrap > div.public-container > main > div.left-menu > ul > li.active > a');
+	//   			let mask = this.genNodes($elem, {pv: 200, uv:400});
+	//   			this.renderNodes();
+	//   			$body.append(mask);
+
+
 				api.getHeatData(config).then((data) => {
 					var $iframe = $('iframe').contents();
 					var $body = $iframe.find('body');
-					// let $elem = $iframe.find('body > div.gome-about.gome-wrap > div.public-container > main > div.left-menu > ul > li.active > a');
-	    //   			let mask = this.genDiv($elem, 200);
-	    //   			$body.append(mask);
 					
-		      		for(let t of data) {
-		      			let $elem = $iframe.find(t.selector);
-		      			let mask = this.genDiv($elem, t.pv/100);
-		      			$body.append(mask);
-		      		}
-		      	})
+					for(let t of data) {
+						let $elem = $iframe.find(t.selector);
+						let mask = this.genNodes($elem, t);
+						$body.append(mask);
+					}
+					this.renderNodes();
+				});
 			},
-			genDiv($elem, value) {
-				let offset = $elem.offset();
-				let width = $elem.outerWidth();
-				let height = $elem.outerHeight();
-				let centerX = offset.left + width / 2;
-				let centerY = offset.top + height / 2;
-				let newDiv = document.createElement("div");
-				newDiv.style = `z-index:900;height:${value}px;width:${value}px; position:absolute;top:${centerY-value/2}px;left:${centerX-value/2}px;background: radial-gradient(red, yellow 20%, #1E90FF 30%, rgba(255,255,255,0) 50%);`;
-				return newDiv;
+			genNodes($elem, item) {
+				let _offset = $elem.offset();
+				let _width = $elem.outerWidth();
+				let _height = $elem.outerHeight();
+				let _product = _width * _height;
+				let _centerX = _offset.left + _width / 2;
+				let _centerY = _offset.top + _height / 2;
+				function calc(value) {
+					// 计算比例k
+					let k = Math.sqrt(value * value / _product);
+					let width = k * _width;
+					let height = k * _height;
+					return {
+						width: width + 'px',
+						height: height + 'px',
+						left: _centerX-width/2 + 'px',
+						top: _centerY-height/2 + 'px'
+					}
+				}
+
+				let data = {}
+				for(let type of this.dataTypes) {
+					data[type] = calc(item[type]);
+				}
+				let divNode = document.createElement("div");
+				divNode.style = `z-index:900;position:absolute;background: radial-gradient(red, yellow 20%, #1E90FF 30%, rgba(255,255,255,0) 50%);`;
+				let res = {
+					divNode,
+					data
+				}
+				this.maskNodes.push(res);
+				return divNode;
+			},
+			renderNodes(type = this.dataTypes[0]) {
+				for(let node of this.maskNodes) {
+					Object.assign(node.divNode.style, node.data[type]);
+				}
+			}
+		},
+		watch: {
+			'mask': {
+				handler(val) {
+					if(val) {
+						for(let div of this.maskdivs) {
+							div.style.display = 'block';
+						}
+
+					} else {
+						for(let div of this.maskdivs) {
+							div.style.display = 'none';
+						}
+						
+					}
+				}   
+			},
+			'datatype': {
+				handler(val) {
+					this.renderNodes(val);
+				}
 			}
 		}
 	});
@@ -76,5 +146,13 @@
 	cursor: auto;
 	background: rgba(255,255,255,0.2);
 }
+.extendNav {
+	position: absolute;
+	right: 50px;
+}
+.data-type {
+	display: inline-block;
+	margin-right: 20px;
+}
 
 </style>
